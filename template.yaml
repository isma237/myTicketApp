AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  MyTicket

  Sample SAM Template for MyTicket

Parameters:
  SenderEmailAddress:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Adresse email de l'emetteur
    Default: /Nabisso/MyTicket/Dev/SenderEmailAddress
  SESIdentitySenderUser:
    Type: AWS::SSM::Parameter::Value<String>
    Description: SES Identity for Sender Email User
    Default: /Nabisso/MyTicket/Dev/SESIdentity

Globals:
  Function:
    Timeout: 3

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
  GetSingleTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_single_ticket/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:Query
          Resource: !GetAtt TicketTable.Arn
      Events:
        GetSingleTicket:
          Type: Api
          Properties:
            Path: /ticket
            Method: get
  CreateTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_ticket/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !GetAtt TicketTable.Arn
      Events:
        CreateTicket:
          Type: Api
          Properties:
            Path: /ticket
            Method: post
  SendEmailToResponsableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: send_email_responsable/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          senderEmail: !Ref SenderEmailAddress
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            Resource: !GetAtt TicketTable.StreamArn
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ses:SendEmail
            - SES:SendRawEmail
            Resource: !Ref SESIdentitySenderUser
      Events:
        StreamSendEmailToResponsable:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TicketTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
  TicketTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: owner_email
          AttributeType: S
        - AttributeName: title
          AttributeType: S
        - AttributeName: user_email
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: owner_email
          KeyType: HASH
        - AttributeName: title
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "myTicketTable"
      GlobalSecondaryIndexes:
        - IndexName: EmailResourceAndTitle
          KeySchema:
            - AttributeName: user_email
              KeyType: HASH
            - AttributeName: type
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - title
              - content
              - created_at
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
